@page "/"
@using AciConnectionMinimal.Options
@using Azure.Identity
@using Azure.ResourceManager
@using Azure.ResourceManager.KeyVault
@using Azure.ResourceManager.Resources
@using Microsoft.Extensions.Options
@using System.Text
@inject IOptionsMonitor<VaultOptions> _options;
@inject ILogger<Home> _logger
<PageTitle>ACI Vault Configuration Minimal Reproduction</PageTitle>

<h1>ACI Vault Configuration Minimal Reproduction</h1>
<p>If all is working, a list of secret names from key vault @_options.CurrentValue.VaultName should display below</p>
<div style="font-weight: bold;">Secret Names</div>
<ol>
    @foreach (var s in SecretNames)
    {
        <li>@s</li>
    }
</ol>

<div style="font-weight: bold;">Message Log</div>
<div>
@foreach (var m in Messages)
{
    <pre>@m</pre>
}
</div>

@code {
    List<string> SecretNames = new();
    List<string> Messages = new();

    protected override void OnInitialized()
    {
        _logger.LogInformation("Home.razor initializing");
        GetSecretNames();
        _logger.LogInformation("Home.razor initialization complete");
    }

    private void GetSecretNames()
    {
        _logger.LogInformation("GetSecretNames() started");

        try {
            Messages.Clear();
            Messages.Add("Attempting to connect to Azure managed identity");
            _logger.LogInformation("Attempting to connect to Azure tenant {tenant} with managed id {client}", 
                    _options.CurrentValue.TenantId, 
                    _options.CurrentValue.ManagedIdentityId);
            var credentialOpts = new DefaultAzureCredentialOptions()
            {
                ManagedIdentityClientId = _options.CurrentValue.ManagedIdentityId,
                TenantId = _options.CurrentValue.TenantId
            };

            ArmClient client = new ArmClient(new DefaultAzureCredential(credentialOpts));
            _logger.LogInformation("[ArmClient] created");

            var rid = KeyVaultResource.CreateResourceIdentifier(_options.CurrentValue.SubscriptionId, 
                                                                _options.CurrentValue.VaultRg, 
                                                                _options.CurrentValue.VaultName);
            var vault = client.GetKeyVaultResource(rid);
            _logger.LogInformation("KeyVault {rid} retrieved", rid);

            if (vault is null)
            {
                _logger.LogError("Key vault {vaultName} not found", _options.CurrentValue.VaultName);
                Messages.Add(string.Format("Key vault {0} not found", _options.CurrentValue.VaultName));
                return;
            }
            var secrets = vault.GetKeyVaultSecrets().Select(s => s.Data.Name).ToList();
            SecretNames.Clear();
            SecretNames.AddRange(secrets);
            _logger.LogInformation("Retrieved {count} secret names from vault", SecretNames.Count);
            Messages.Add(string.Format("Retrieved {0} secret names from vault", SecretNames.Count));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception contacting Azure services");
            var sb = new StringBuilder("Exception contacting Azure services");
            sb.AppendLine(ex.GetType().FullName);
            sb.AppendLine(ex.Message);
            Messages.Add(sb.ToString());
        }
        _logger.LogInformation("GetSecretNames() finished");
    }

}